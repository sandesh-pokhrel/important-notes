Commands -

	Selections -------
		kubectl get all
		kubectl get deployment
		kubectl get services
		kubectl get pods
		kubectl get pods -w -->> watches for the status and any other changes
		kubectl get pods -o yaml 
		kubectl get replicasets
		kubectl get pv --> persistent volume
		kubectl get pvc --> persistent volume claim
		kubectl get storageclass -->> prints the default storage class in k8s cluster
		
		kubectl get pod -o wide
	
	Creation ---------
		kubectl create deployment advdiscovery --image=jhipster/jhipster-registry:v7.3.0 --dry-run=client -o=yaml > advdiscovery-deployment.yml
		kubectl apply -f advdiscovery-deployment.yml
		kubectl create service clusterip advdiscovery --tcp=8761:8761 --dry-run=client -o=yaml > advdiscovery-service.yml
		kubectl apply -f advdiscovery-service.yml
		
		kubectl expose deployment advdiscovery --type=NodePort --name=advdiscovery
		kubectl port-forward deployment/advdiscovery 8989:8761 -- port forwarding the nodeport port<8761> to localhost 8989
		
		--dry-run flag in commands like create apply and others will show what will happens if we run that command
			EG: kubectl create -f advdiscovery-deployment.yml --dry-run
	
	Describe ---------
		kubectl describe deployment/pod/pv/pvc/service <name>
		
	Explain ------
		kubectl explain pod --recursive -->> it will explain all configs related to pod
		kubectl explain deployment
		kubectl explain deployment.spec
		kubectl explain deployment.spec.template
		
	Logs ---------
		kubectl logs <podname>
		kubectl logs mysql-6db4f6c7d-rm4sb -n default -c mysql
		
	Deletion ------
		kubectl delete pod <podname>
		kubectl delete all --all --all-namespaces
		
	Notes ----
		pod is getting accessed using LoadBalancer service type
		deployment is getting accessed using NodePort service type
		
	Contexts -----
		kubectl config view -- check for current context
		kubectl config get-contexts -- show contexts
		kubectl config current-context -- show current context
		kubectl context set-context --current --namespace=test --> change current namespace
		
	Labels ---
		kubectl get nodes --show-labels
		kubectl label nodes ip-172-31-24-159.us-west-2.compute.internal index=first
		
	Other commands ---
		kubectl api-resources -- show all components to use like pod,sevice,deployment
		kubectl api-version
		kubectl set env deploy/myapp ROOT_PASSWORD=SOMETHING -->> setting up env variable in running deployment .. will be considered as rolling update
		kubectl set env --from=configmap/mycm deploy/myapp -->> setting env in deployment using config map
		
	Patching deployment ---
		kubectl patch deployment your_deployment -p "{\"spec\": {\"template\": {\"metadata\": { \"labels\": {  \"redeploy\": \"$(date +%s)\"}}}}}"
		
	Init containers can also be specified in yaml file. The purpose of these are to make sure that certain things got completed.
		in yaml -initContainers    similar to -containers
		make sure these gets completed soon otherwise other container won't start and just stuck
	Services 
		ClusterIP - works internally inside the cluster
		NodePort - can be accessed from outside
			- with IP address of each node with nodePort the pod can be accessed
		
		
deployment and service - https://www.armosec.io/blog/kubernetes-deployment-and-service/

service - https://kubernetes.io/docs/concepts/services-networking/service/#with-selectors

volumes - https://kubernetes.io/docs/tutorials/stateful-application/mysql-wordpress-persistent-volume/

regarding volume - https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/

kubectl cheatsheet - https://kubernetes.io/docs/reference/kubectl/cheatsheet/

eks steps - https://aws.amazon.com/premiumsupport/knowledge-center/eks-cluster-connection/

eks docs - https://docs.aws.amazon.com/eks/latest/userguide/create-managed-node-group.html

redis cluster - https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/GettingStarted.ConnectToCacheNode.html
	-- install redis-cli to any aws machine
	
	sudo amazon-linux-extras install epel -y
	sudo yum install gcc jemalloc-devel openssl-devel tcl tcl-devel -y
	sudo wget http://download.redis.io/redis-stable.tar.gz
	sudo tar xvzf redis-stable.tar.gz
	cd redis-stable
	sudo make ,,,,  BUILD_TLS=yes   -- apend this if encryption enabled
	
	./redis-stable/src/redis-cli -h <> -p 6379

https://www.youtube.com/watch?v=aZd0UolVwD4
https://www.youtube.com/watch?v=JscvSRcFbuA

if kubernetes stuck then
	Quit Docket Desktop
	Delete the pki folder. Please find the folder in below path C:\Users\<User_Name>\AppData\Local\Docker\pki
	Delete the ~\.kube folder. You can find the .kube in default user directory C:\Users\<User_Name>\.kube
	Start the Docker again.
	
steps:
	kubectl apply -f advdiscovery-deployment.yaml
	kubectl apply -f advconfig-deployment.yaml
	kubectl apply -f advcache-deployment.yaml
	kubectl apply -f mysql-deployment.yaml
	kubectl apply -f advgateway-deployment.yaml
	kubectl apply -f advadjudication-deployment.yaml
	
	kubectl apply -f advdiscovery-service.yaml
	kubectl apply -f advconfig-service.yaml
	kubectl apply -f advcache-service.yaml
	kubectl apply -f mysql-service.yaml
	kubectl apply -f advgateway-service.yaml
	kubectl apply -f advadjudication-service.yaml
	
	
172.31.18.74:8761 - discovery
	